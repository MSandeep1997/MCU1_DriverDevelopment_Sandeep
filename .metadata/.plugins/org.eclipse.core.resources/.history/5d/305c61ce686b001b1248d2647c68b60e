#include<stdint.h>

#define __vo volatile
/*
 * Base addresses of Flash memory, SRAM and ROM
 */

#define FLASH_BASEADDR              0x08000000U         /*This is the Flash base address, See reference manual>memory and bus arch>memory map section*/
#define SRAM1_BASEADDR              0x20000000U         /*This is the SRAM1 base address, which is 112kb*/
#define SRAM2_BASEADDR              0x2001C000U         /*This is the SRAM2 base address, which can be found by adding hex form of 112*1024 to SRAM1 Baseaddr*/
#define ROM_BASEADDR                0x1FFF0000U         /*This is the ROM base address, which is also known as system memory*/
#define SRAM_BASEADDR               SRAM1_BASEADDR      /*This is the SRAM1 base address, which is 112kb*/


/*
 * Base addresses of AHBx and APBx
 */

#define PERIPH_BASE                 0x40000000U
#define APB1_BASEADDR               PERIPH_BASE
#define APB2_BASEADDR               0x40010000U
#define AHB1_BASEADDR               0x40020000U
#define AHB2_BASEADDR               0x50000000U

/*
 * Base addresses of the peripherals which are hanging on the AHB1 bus
 * Complete for the all peripherals by using the reference manual
 */

#define GPIOA_BASEADDR              (AHB1_BASEADDR + 0X0000)
#define GPIOB_BASEADDR              (AHB1_BASEADDR + 0X0400)
#define GPIOC_BASEADDR              (AHB1_BASEADDR + 0X0800)
#define GPIOD_BASEADDR              (AHB1_BASEADDR + 0X0C00)
#define GPIOE_BASEADDR              (AHB1_BASEADDR + 0X1000)
#define GPIOF_BASEADDR              (AHB1_BASEADDR + 0X1400)
#define GPIOG_BASEADDR              (AHB1_BASEADDR + 0X1800)
#define GPIOH_BASEADDR              (AHB1_BASEADDR + 0X1C00)
#define GPIOI_BASEADDR              (AHB1_BASEADDR + 0X2000)

#define RCC_BASEADDR 				(AHB1_BASEADDR + 0X3800)

/*
 * Base addresses of the peripherals which are hanging to the APB1 bus
 * Complete for the all peripherals by using reference manual
 */
#define SPI2_BASEADDR               (APB1_BASEADDR + 0x3800)
#define SPI3_BASEADDR               (APB1_BASEADDR + 0x3C00)

#define USART2_BASEADDR             (APB1_BASEADDR + 0x4400)
#define USART3_BASEADDR             (APB1_BASEADDR + 0x4800)
#define UART4_BASEADDR              (APB1_BASEADDR + 0x4C00)
#define UART5_BASEADDR              (APB1_BASEADDR + 0x5000)

#define I2C1_BASEADDR               (APB1_BASEADDR + 0x5400)
#define I2C2_BASEADDR               (APB1_BASEADDR + 0x5800)
#define I2C3_BASEADDR               (APB1_BASEADDR + 0x5C00)
/*
 * Base addresses of the peripherals which are hanging to the APB2 bus
 * Complete for the all peripherals by using reference manual
 */

#define USART1_BASEADDR             (APB2_BASEADDR + 0x1000)
#define USART6_BASEADDR             (APB2_BASEADDR + 0x1400)

#define SPI1_BASEADDR               (APB2_BASEADDR + 0x3000)
#define EXTI_BASEADDR               (APB2_BASEADDR + 0x3C00)
#define SYSCFG_BASEADDR             (APB2_BASEADDR + 0x3800)

/******************************************Peripheral register definition structure*************************************************/
/*
 * Address of peripheral registers
 * The number of registers of a peripheral is based on the MCU
 */
typedef struct
{
	__vo uint32_t MODER;      /*GPIO port Mode register                Address offset 0x00*/
	__vo uint32_t OTYPER;     /*GPIO port Output type register         Address offset 0x04*/
	__vo uint32_t OSPEEDR;
	__vo uint32_t PUPDR;
	__vo uint32_t IDR;
	__vo uint32_t ODR;
	__vo uint32_t BSRR;
	__vo uint32_t LCKR;
	__vo uint32_t AFR[2];     /*GPIO port Alternate functionality register         Array [0] corresponds AFRlow and [1] corresponds to AFRhigh*/
}GPIO_RegDef_t;

typedef struct
{
	__vo uint32_t CR;          /* Reference-RCC register map section;  Offset address of the control register: 0x00*/
	__vo uint32_t PLLCFGR;
	__vo uint32_t CFGR;
	__vo uint32_t CIR;
	__vo uint32_t AHB1RSTR;
	__vo uint32_t AHB2RSTR;
	__vo uint32_t AHB3RSTR;
	uint32_t Reserved0;        /*Offset address of the Reserved: 0x1C*/
	__vo uint32_t APB1RSTR;
	__vo uint32_t APB2RSTR;
	uint32_t Reserved1;
	uint32_t Reserved2;
	__vo uint32_t AHB1ENR;
	__vo uint32_t AHB2ENR;
	__vo uint32_t AHB3ENR;
	uint32_t Reserved3;
	__vo uint32_t APB1ENR;
	__vo uint32_t APB2ENR;
	uint32_t Reserved4;
	uint32_t Reserved5;
	__vo uint32_t AHB1LPENR;
	__vo uint32_t AHB2LPENR;
	__vo uint32_t AHB3LPENR;
	uint32_t Reserved6;
	__vo uint32_t APB1LPENR;
	__vo uint32_t APB2LPENR;
	uint32_t Reserved7;
	uint32_t Reserved8;
	__vo uint32_t BDCR;
	__vo uint32_t CSR;
	uint32_t Reserved9;
	uint32_t Reserved10;
	__vo uint32_t SSCGR;
	__vo uint32_t PLLI2SCFGR;
	__vo uint32_t PLLSAICFGR;
	__vo uint32_t DCKCFGR;
}RCC_RegDef_t;

/*Peripheral definitions (Peripheral base addresses type casted to xxx_RegDef_t)*/

#define GPIOA     ((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB     ((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC     ((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD     ((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE     ((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF     ((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG     ((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH     ((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI     ((GPIO_RegDef_t*)GPIOI_BASEADDR)

#define RCC 	  ((RCC_RegDef_t*)RCC_BASEADDR)


/*Clock enable macro for GPIO peripheral*/
#define GPIOA_PCLK_EN()      (RCC->AHB1ENR |= (1 << 0))
#define GPIOB_PCLK_EN()      (RCC->AHB1ENR |= (1 << 1))
#define GPIOC_PCLK_EN()      (RCC->AHB1ENR |= (1 << 2))
#define GPIOD_PCLK_EN()      (RCC->AHB1ENR |= (1 << 3))
#define GPIOE_PCLK_EN()      (RCC->AHB1ENR |= (1 << 4))
#define GPIOF_PCLK_EN()      (RCC->AHB1ENR |= (1 << 5))
#define GPIOG_PCLK_EN()      (RCC->AHB1ENR |= (1 << 6))
#define GPIOH_PCLK_EN()      (RCC->AHB1ENR |= (1 << 7))
#define GPIOI_PCLK_EN()      (RCC->AHB1ENR |= (1 << 8))

/*Clock enable macro for I2Cx peripheral*/

#define I2C1_PCLK_EN()       (RCC->APB1ENR |= (1 << 21))
#define I2C2_PCLK_EN()       (RCC->APB1ENR |= (1 << 22))
#define I2C3_PCLK_EN()       (RCC->APB1ENR |= (1 << 23))

/*Clock enable macro for SPIx peripheral*/

#define SPI1_PCLK_EN()		 (RCC->APB2ENR |= (1 << 12))
#define SPI2_PCLK_EN()		 (RCC->APB1ENR |= (1 << 14))
#define SPI3_PCLK_EN()		 (RCC->APB1ENR |= (1 << 15))
#define SPI4_PCLK_EN()		 (RCC->APB2ENR |= (1 << 13))

/*Clock enable macro for USARTx peripheral*/

#define USART1_PCLK_EN()     (RCC->APB2ENR |= (1 << 4))
#define USART2_PCLK_EN()     (RCC->APB1ENR |= (1 << 17))
#define USART3_PCLK_EN()     (RCC->APB1ENR |= (1 << 18))
#define UART4_PCLK_EN()      (RCC->APB1ENR |= (1 << 19)
#define UART5_PCLK_EN()      (RCC->APB1ENR |= (1 << 20))
#define USART6_PCLK_EN()     (RCC->APB2ENR |= (1 << 5))

/*Clock enable macro for SYSCFG peripheral*/

#define SYSCFG_PCLK_EN()     (RCC->APB2ENR |= (1 << 14))



/*Clock disable macro for GPIOx peripheral*/

#define GPIOA_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 0)) //Bitwise AND is for the reset a bit and negation is for clear a bit
#define GPIOB_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 1))
#define GPIOC_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 2))
#define GPIOD_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 3))
#define GPIOE_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 4))
#define GPIOF_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 5))
#define GPIOG_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 6))
#define GPIOH_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 7))
#define GPIOI_PCLK_DI()      (RCC->AHB1ENR &= ~(1 << 8))

/*Clock disable macro for I2Cx peripheral*/

#define I2C1_PCLK_DI()       (RCC->APB1ENR &= ~(1 << 21))
#define I2C2_PCLK_DI()       (RCC->APB1ENR &= ~(1 << 22))
#define I2C3_PCLK_DI()       (RCC->APB1ENR &= ~(1 << 23))

/*Clock disable macro for SPIx peripheral*/

#define SPI1_PCLK_DI()		 (RCC->APB2ENR &= ~(1 << 12))
#define SPI2_PCLK_DI()		 (RCC->APB1ENR &= ~(1 << 14))
#define SPI3_PCLK_DI()		 (RCC->APB1ENR &= ~(1 << 15))
#define SPI4_PCLK_DI()		 (RCC->APB2ENR &= ~(1 << 13))

/*Clock disable macro for USARTx peripheral*/

#define USART1_PCLK_DI()     (RCC->APB2ENR &= ~(1 << 4))
#define USART2_PCLK_DI()     (RCC->APB1ENR &= ~(1 << 17))
#define USART3_PCLK_DI()     (RCC->APB1ENR &= ~(1 << 18))
#define UART4_PCLK_DI()      (RCC->APB1ENR &= ~(1 << 19)
#define UART5_PCLK_DI()      (RCC->APB1ENR &= ~(1 << 20))
#define USART6_PCLK_DI()     (RCC->APB2ENR &= ~(1 << 5))

/*Clock disable macro for SYSCFG peripheral*/

#define SYSCFG_PCLK_DI()     (RCC->APB2ENR &= ~(1 << 14))

/*macro to reset GPIOx peripherals*/

#define GPIOA_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 0)); (RCC->AHB1RSTR &= ~(1 << 0)); } while(0)
#define GPIOB_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 1)); (RCC->AHB1RSTR &= ~(1 << 1)); } while(0)
#define GPIOC_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 2)); (RCC->AHB1RSTR &= ~(1 << 2)); } while(0)
#define GPIOD_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 3)); (RCC->AHB1RSTR &= ~(1 << 3)); } while(0)
#define GPIOE_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 4)); (RCC->AHB1RSTR &= ~(1 << 4)); } while(0)
#define GPIOF_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 5)); (RCC->AHB1RSTR &= ~(1 << 5)); } while(0)
#define GPIOG_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 6)); (RCC->AHB1RSTR &= ~(1 << 6)); } while(0)
#define GPIOH_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 7)); (RCC->AHB1RSTR &= ~(1 << 7)); } while(0)
#define GPIOI_REG_RESET()    do{ (RCC->AHB1RSTR |= (1 << 8)); (RCC->AHB1RSTR &= ~(1 << 8)); } while(0)

/*miscellaneous Macros*/
#define ENABLE           1
#define DISABLE          0
#define SET              ENABLE
#define RESET            DISABLE
#define GPIO_PIN_SET     SET
#define GPIO_PIN_RESET   RESET



